version: "3"

tasks:
  runserver:
    description: Run the FastAPI server
    usage: "task run"
    cmds:
      - source .venv/bin/activate && MONGO_URL="mongodb://0.0.0.0:27017" python3.13 fastapi/src/server.py

  push:
    description: Build and push the docker image for backend
    usage: "task push"
    cmds:
      - docker build -t 471528030347.dkr.ecr.us-east-1.amazonaws.com/logforge:latest ./fastapi
      - docker push 471528030347.dkr.ecr.us-east-1.amazonaws.com/logforge:latest
  tf_init:
    description: Init an infrastructure stack. Do not use on the organization stack.
    usage: "task tf_init"
    cmds:
      - terraform -chdir=_infrastructure/terraform/ init -reconfigure

  tf_apply:
    description: Apply infrastructure
    usage: "task tf_apply"
    cmds:
      - terraform -chdir=_infrastructure/terraform/ apply

  tf_console:
    description: Use the console
    usage: "task tf_console"
    cmds:
      - terraform -chdir=_infrastructure/terraform/ console

  tf_output_raw:
    description: Output an argument from a state
    usage: "task tf_output_raw -- registry_url"
    cmds:
      - output=$(echo {{ .CLI_ARGS }} | cut -d " " -f1);
        echo $(terraform -chdir=_infrastructure/terraform/ output -raw ${output})

  tf_output:
    description: Output all of the outputs from the state
    usage: "task tf_output -- registry"
    cmds:
      - output=$(echo {{ .CLI_ARGS }} | cut -d " " -f1);
        echo $(terraform -chdir=_infrastructure/terraform/stacks/${stack} output)

  ssh:
    description: SSH into an EC2 instance
    usage: "task ssk_ec2 -- registry"
    cmds:
      - ec2_public_ip=$(terraform -chdir=_infrastructure/terraform/stacks/web output -raw ec2_public_ip);
        ssh ubuntu@${ec2_public_ip}

  apb:
    description: Run an ansible playbook
    usage: "task ansible_pb -- deploy"
    cmds:
      - playbook=$(echo {{ .CLI_ARGS }} | cut -d " " -f1);
        ansible-playbook -i inventory.ini _infrastructure/ansible/playbooks/${playbook}.yml

  deploy_frontend:
    description: Deploy the frontend
    usage: "task deploy_frontend"
    cmds:
      - ansible-playbook -i inventory.ini _infrastructure/ansible/playbooks/deploy_frontend.yml

  deploy_logging_sidecar:
    description: Deploy the logging sidecar
    usage: "task deploy_logging_sidecar"
    cmds:
      - LOGFORGE_SERVER_URL=${terraform -}
        LOGFORGE_SERVER_URL="http://logforge.example.com" ansible-playbook -i inventory.ini _infrastructure/ansible/playbooks/deploy_logging_sidecar.yml